The exam is hands-on in an Ubuntu terminal. This is where you need to excel. Practice using the terminal as much as possible. 
If in Windows world use WSL2 as much as possible. I sat up Ubuntu as my default Windows terminal in Win11

Get used to using short names for kubernetes resources. Easier and faster to type. 
Can be seen by running:
kubectl api-resources

Learn how to navigate kubernetes.io/docs and find whatever you need quickly (I often search for 'kind: <some-object>' and then put it on the paste board for re-use when on the relevant page)

Don't write yaml by hand! Too slow and too error-prone!
Either copy from kubernetes.io/docs or generate via commands like:
kubectl run <pod-name> --image=<image-name> --oyaml --dry-run=client -n <namespace> (optionally configure env vars via --env=<var1>=<val1 and labels via -l=label1=value1)>p.yml
with alias setup it would be
kr <pod-name> --image=<image-name> $do -n <namespace> >p.yml (plus optionally parameters - significantly shorter and faster than writing the full commands)
The other command I used again and again was
kubectl create <object-type> <object-name> -n <namespace> >x.yml (plus optionally parameters passed in). This way you can quickly create yaml for configmaps, secrets, deployments, cronjobs, jobs, ingresses
with alias it would be
kc <object-type> <object-name> -n <namespace> > x.yml (where x represents a one to three letter trained short object form. For instance d for deployment cj for cronjob etc.
Check 'kubectl create -h' for supported object types that can be created this way 
Once you have the yaml, it can quickly be applied using kubectl create or kubectl apply commands. I used these aliases:
kc -f x.yml
ka -f x.yml

Become familiar with "kubectl explain <object-type>", "kubectl explain <object-type>.<field>", "kubectl explain <object-type> --recursive". The latter one can be super useful when piped to grep -i -C <context-lines>. In some cases it is faster checking yaml structure or supported values for specific fields than searching on kubernetes.io/docs. 

Know CTRL+a brings you to the start of a line in terminal
Know CTRL+e brings you to the end of a line in terminal

Know CTRL+z puts a process in the background in terminal (bring it back using 'fg')

Become familiar with vi or nano
Become familiar with tmux
Become familiar with aliases on Ubunutu
Become familiar with grep (-i,-R options especially)
Become familiar with general short form arguments to kubectl (-h vs --help, -A vs --all)

Become familiar with less and tree

Consider making your own flashcards to memorize various things. I made the ones below to ensure I trained and memorized things I bumped into I didn't know and found relevant to remember (I used cram.com - free):
https://www.cram.com/flashcards/ckad-13709656
https://www.cram.com/flashcards/helm-13716537
https://www.cram.com/flashcards/kubectl-13168712

The majority of my preparation I spent watching videos and doing labs via:
https://kodekloud.com/courses/certified-kubernetes-application-developer-ckad/
I used a spreadsheet with date and subject rehearsed as well as how long it took to do the lab.
I made notes in the spreadsheet when something was challenging and kept revisiting until the topic was easy
I prioritized labs over videos. Not sure I saw all videos.

When I had a decent all-round proficiency I moved on to do mock exams from this site:
https://kodekloud.com/lessons/certified-kubernetes-application-developer-mock-exam-series/
These are  mock exams with 20 random questions. One mock exam is meant to take 2 hours. I wanted to rehearse smaller chunks often as that fitted my schedule best.
So I did 5 questions some days, 10 some days and some days an entire set. Many days I skipped due to work or private stuff..:-) 
I kept track of number of questions and how well I did in the beforementioned spreadsheet. One major difference between the kodekloud mock exams and the real exam and killer.sh sessions is the way passing percentage is calculated. Kodekloud mock exams have 20 questions typically devided into 2-5 parts. If you get just one of these wrong it will count the entire question as failed. In the real exam it is granular. You get points for each part. So in that way the real exam is a bit easier than getting the kodekloud mock exams right. 
When I started passing I started thinking about the last month of exam prep. When buying the exam slot, you get 2 sessions on https://killer.sh with access for 36 hours.
Killer.sh is a CKAD exam simulator that most accurately resembles the real exam environment. You want to practice in the environment, so you know how to copy/paste, switch between windows (terminal and FireFox browser primarily). Especially if you are coming from Windows.
For instance I didn't know how to maximize FireFox so first time I did a test exam I could only partially view the kubernetes.io/docs page. Subsequently I found ALT + F10 was the solution (maximize window) (or F11 for full-screen).
My exam plan and execution looked like this:
17 days before exam: booked exam slot
15 days before exam: did my first 36 hour killer.sh session. I did the exam set 4 times over two days and reviewed challenging topics. Status and percentage in my spreadsheet.
14 days to 3 days before exam: I practiced 7 times on topics that were still challenging. My first killer.sh session showed I needed to get faster. I optimized my alias usage for more speed.
2 days before exam: I did my second 36 hour killer.sh session. I did two two-hour exam sessions and they went well. I scored 90/113 and 101/113. 
1 day before exam: Relaxed. thought about other things. Spent time with family. At this point I believe you have to trust your preparation and so I tried. 
Exam day: I booked exam Sunday morning at 10. The room has to be meticously stripped from personal belongings. I was asked to show the proctor the back of my screen. The backside of my keyboard and laptop. Had to explain what the silver grey thing connected to my laptop was (it was my USB hub I needed because my laptop only has 2 USB ports and I need ports for keyboard, mouse and web cam). Remove label from my water bottle. Show what was under my desk (nothing).

Finally the exam started. It felt challenging and stressful despite my preparation, but I managed to do all questions fully except one regarding ingresses I couldn't get my head around. I think I did the ingress one partially and might have scored a few points on that as well. 

Realizations after my exam:
I think I would do better if I arrived earlier at the exam location earlier. 2 hours is probably ideal. I arrived half an hour before exam start and needed to setup equipment, get my ID approved etc. Not optimal.
Consider if you do best in the morning or later during the day. I think I work better in the afternoon, so I could maybe have done better if I had scheduled a slot in the afternoon. 

https://killercoda.com/ (CKAD section - free)
https://killer.sh/

Research when you bump into behavior that surprices you. For instance I couldn't understand why 'kg secret -oyaml' gave a different result than 'kd secret'. I asked ChatGPT about the differences and got a great explanation I could verify subsequently. Turns out, 'k describe secret' implicitly base64 decodes, which 'k get secret' does not. Good to know!


